/*
 * This file is generated by jOOQ.
 */
package com.klaus.iv.stockadmin.db.tables;


import com.klaus.iv.stockadmin.db.Guide;
import com.klaus.iv.stockadmin.db.Keys;
import com.klaus.iv.stockadmin.db.tables.records.ResourceRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Resource extends TableImpl<ResourceRecord> {

    private static final long serialVersionUID = 2120448409;

    /**
     * The reference instance of <code>guide.resource</code>
     */
    public static final Resource RESOURCE = new Resource();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResourceRecord> getRecordType() {
        return ResourceRecord.class;
    }

    /**
     * The column <code>guide.resource.id</code>.
     */
    public final TableField<ResourceRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>guide.resource.create_by</code>.
     */
    public final TableField<ResourceRecord, Long> CREATE_BY = createField(DSL.name("create_by"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>guide.resource.create_dt</code>.
     */
    public final TableField<ResourceRecord, LocalDateTime> CREATE_DT = createField(DSL.name("create_dt"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>guide.resource.is_delete</code>.
     */
    public final TableField<ResourceRecord, Integer> IS_DELETE = createField(DSL.name("is_delete"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>guide.resource.update_by</code>.
     */
    public final TableField<ResourceRecord, Long> UPDATE_BY = createField(DSL.name("update_by"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>guide.resource.update_dt</code>.
     */
    public final TableField<ResourceRecord, LocalDateTime> UPDATE_DT = createField(DSL.name("update_dt"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>guide.resource.code</code>.
     */
    public final TableField<ResourceRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>guide.resource.name</code>.
     */
    public final TableField<ResourceRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>guide.resource</code> table reference
     */
    public Resource() {
        this(DSL.name("resource"), null);
    }

    /**
     * Create an aliased <code>guide.resource</code> table reference
     */
    public Resource(String alias) {
        this(DSL.name(alias), RESOURCE);
    }

    /**
     * Create an aliased <code>guide.resource</code> table reference
     */
    public Resource(Name alias) {
        this(alias, RESOURCE);
    }

    private Resource(Name alias, Table<ResourceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Resource(Name alias, Table<ResourceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Resource(Table<O> child, ForeignKey<O, ResourceRecord> key) {
        super(child, key, RESOURCE);
    }

    @Override
    public Schema getSchema() {
        return Guide.GUIDE;
    }

    @Override
    public Identity<ResourceRecord, Long> getIdentity() {
        return Keys.IDENTITY_RESOURCE;
    }

    @Override
    public UniqueKey<ResourceRecord> getPrimaryKey() {
        return Keys.KEY_RESOURCE_PRIMARY;
    }

    @Override
    public List<UniqueKey<ResourceRecord>> getKeys() {
        return Arrays.<UniqueKey<ResourceRecord>>asList(Keys.KEY_RESOURCE_PRIMARY);
    }

    @Override
    public Resource as(String alias) {
        return new Resource(DSL.name(alias), this);
    }

    @Override
    public Resource as(Name alias) {
        return new Resource(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Resource rename(String name) {
        return new Resource(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Resource rename(Name name) {
        return new Resource(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, LocalDateTime, Integer, Long, LocalDateTime, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
